package com.android.slider.utils;

import java.io.BufferedInputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.util.Random;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.entity.BufferedHttpEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.drawable.BitmapDrawable;
import android.os.AsyncTask;
import android.util.Log;
import android.widget.ImageView;

public class DownloadImagesUtil extends AsyncTask<ImageView, Void, Bitmap>{

	ImageView imageView = null;
	//public static final String WEB_SOURCE_SITE = "http://fishki.net/demotivation/1320795-demotivatory/";
	
	@Override
	protected Bitmap doInBackground(ImageView... params) {
		
		imageView = params[0];
		URL url = null;
		try {
			url = new URL((String)params[0].getTag());
		} catch (MalformedURLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
//		try {
//			url = new URL(generateRandomNumberOfURIImage());
//		} catch (MalformedURLException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
		
		Bitmap bmp = null;
		bmp = DecodeBitmapSampleSize((String)params[0].getTag(), 48, 64);
//		final BitmapFactory.Options options = new BitmapFactory.Options();
//		options.inJustDecodeBounds = true; 
//		BufferedInputStream buffer=new BufferedInputStream(is);
//		BitmapFactory.decodeStream(buffer,null,options);
//		buffer.reset();
//
//		    // Calculate inSampleSize
//		options.inSampleSize = calculateInSampleSize(options, reqWidth,reqHeight);
//
//		    // Decode bitmap with inSampleSize set
//		options.inJustDecodeBounds = false; 
//		BitmapFactory.decodeStream(buffer,null,options);
//	      try{
//	            //URL ulrn = new URL(url);
//	            HttpURLConnection con = (HttpURLConnection)url.openConnection();
//	            InputStream is = con.getInputStream();
//	            bmp = BitmapFactory.decodeStream(is);
//	            if (null != bmp)
//	                return bmp;
//
//	            }catch(Exception e){}
//        HttpClient client = new DefaultHttpClient();
//        HttpGet request = new HttpGet((String)params[0].getTag());
//        HttpResponse response;
//        try {
//            response = (HttpResponse)client.execute(request);           
//            HttpEntity entity = response.getEntity();
//            BufferedHttpEntity bufferedEntity = new BufferedHttpEntity(entity);
//            InputStream inputStream = bufferedEntity.getContent();
//            bmp = BitmapFactory.decodeStream(inputStream);
//        } catch (ClientProtocolException e) {
//            // TODO Auto-generated catch block
//            e.printStackTrace();
//        } catch (IOException e) {
//            // TODO Auto-generated catch block
//            e.printStackTrace();
//        }
		return bmp;
	}
    public Bitmap DecodeBitmapSampleSize (String strURL, int reqWidth, int reqHeight) {
        //InputStream in = null;
        //Bitmap bmp = null;
        Bitmap image = null;
        InputStream in = null;
        try
            {
                in = new java.net.URL(strURL).openStream();
                BitmapFactory.Options opts = new BitmapFactory.Options();
                opts.inSampleSize = 2;
                image = BitmapFactory.decodeStream(new FlushedInputStream(in),null,opts);
                in.close();
            }
        catch (MalformedURLException e)
            {
                e.printStackTrace();
            }
        catch (IOException e)
            {
                e.printStackTrace();
            }
        return image;
//        HttpClient client = new DefaultHttpClient();
//        HttpGet request = new HttpGet(strURL);
//        HttpResponse response;
//        try {
//            response = (HttpResponse)client.execute(request);           
//            HttpEntity entity = response.getEntity();
//            BufferedHttpEntity bufferedEntity = new BufferedHttpEntity(entity);
//            InputStream inputStream = bufferedEntity.getContent();
//            bmp = BitmapFactory.decodeStream(inputStream);
//        } catch (ClientProtocolException e) {
//            // TODO Auto-generated catch block
//            e.printStackTrace();
//        } catch (IOException e) {
//            // TODO Auto-generated catch block
//            e.printStackTrace();
//        }
//        in = OpenHttpConnection(strURL);
//        final BitmapFactory.Options options = new BitmapFactory.Options();
//        options.inJustDecodeBounds = true;
//        BufferedInputStream buffer=new BufferedInputStream(in);
//        BitmapFactory.decodeStream(buffer, null, options);
//        try {
//			buffer.reset();
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//
//        options.inSampleSize = calculateSampleSize(options, reqWidth, reqHeight);
//
//        options.inJustDecodeBounds = false;
//        bmp = BitmapFactory.decodeStream(buffer, null, options);
//                return bmp;
    }
    private static InputStream fetch(String address) throws MalformedURLException,IOException {
        HttpGet httpRequest = new HttpGet(URI.create(address) );
        HttpClient httpclient = new DefaultHttpClient();
        HttpResponse response = (HttpResponse) httpclient.execute(httpRequest);
        HttpEntity entity = response.getEntity();
        BufferedHttpEntity bufHttpEntity = new BufferedHttpEntity(entity);
        InputStream instream = bufHttpEntity.getContent();
        return instream;
    }
    private InputStream OpenHttpConnection(String strURL) {

        try {
            URL url = new URL(strURL);

            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            InputStream in = new BufferedInputStream(connection.getInputStream());
            return in;
        } catch (Exception exception) {
            exception.printStackTrace();
            return null;
        }
    }

    public static int calculateSampleSize(BitmapFactory.Options options,
            int reqWidth, int reqHeight) {

        final int width = options.outWidth;
        final int height = options.outHeight;
        int inSampleSize = 1;

        if (width > reqWidth || height > reqHeight) {
            if (width > height) {
                inSampleSize = Math.round((float) height / (float) reqHeight);
            } else {
                inSampleSize = Math.round((float) width / (float) reqWidth);
            }
        }
        return inSampleSize;
    }
	@Override
	protected void onPostExecute(Bitmap result) {
		// TODO Auto-generated method stub
		super.onPostExecute(result);
		imageView.setImageBitmap(result);
	}
//	private String generateRandomNumberOfURIImage() {
//		Random r = new Random();
//		int randomImageNum = r.nextInt(80 - 65) + 65;
//		StringBuilder sb = new StringBuilder();
//		sb.append(WEB_SOURCE_SITE);
//		sb.append("12123");
//		sb.append(randomImageNum);
//		sb.append("-photo.html/gallery-");
//		sb.append(randomImageNum);
//		sb.append("/");
//		return sb.toString();
//	}
	static class FlushedInputStream extends FilterInputStream
    {
        public FlushedInputStream( InputStream inputStream )
            {
                super(inputStream);
            }

        @Override
        public long skip(long n) throws IOException
            {
                long totalBytesSkipped = 0L;
                while (totalBytesSkipped < n)
                    {
                        long bytesSkipped = in.skip(n - totalBytesSkipped);
                        if (bytesSkipped == 0L)
                            {
                                int byte1 = read();
                                if (byte1 < 0)
                                    {
                                        break; // we reached EOF
                                    }
                                else
                                    {
                                        bytesSkipped = 1; // we read one byte
                                    }
                            }
                        totalBytesSkipped += bytesSkipped;
                    }
                return totalBytesSkipped;
            }
    }
}
