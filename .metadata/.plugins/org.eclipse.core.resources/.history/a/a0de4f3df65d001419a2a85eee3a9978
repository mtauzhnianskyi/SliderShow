package com.android.slider.utils;

import java.io.BufferedInputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.util.Random;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.entity.BufferedHttpEntity;
import org.apache.http.impl.client.DefaultHttpClient;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.drawable.BitmapDrawable;
import android.os.AsyncTask;
import android.util.Log;
import android.widget.ImageView;

public class DownloadImagesUtil extends AsyncTask<ImageView, Void, Bitmap>{
	static final int BUFFER_SIZE = 128 * 1024;
	ImageView imageView = null;
	
	@Override
	protected Bitmap doInBackground(ImageView... params) {
		
		imageView = params[0];
		URL url = null;
		try {
			url = new URL((String)params[0].getTag());
		} catch (MalformedURLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		Bitmap bmp = null;
		HttpGet httpRequest = new HttpGet(URI.create((String)params[0].getTag()) );
		HttpClient httpclient = new DefaultHttpClient();
		HttpResponse response = null;
		try {
			response = (HttpResponse) httpclient.execute(httpRequest);
		} catch (ClientProtocolException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		HttpEntity entity = response.getEntity();
		BufferedHttpEntity bufHttpEntity = null;
		try {
			bufHttpEntity = new BufferedHttpEntity(entity);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			bmp = BitmapFactory.decodeStream(bufHttpEntity.getContent());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		httpRequest.abort();
		//bmp = DecodeBitmapSampleSize((String)params[0].getTag(), 48, 64);
//		final BitmapFactory.Options options = new BitmapFactory.Options();
//		options.inJustDecodeBounds = true; 
//		BufferedInputStream buffer=new BufferedInputStream(is);
//		BitmapFactory.decodeStream(buffer,null,options);
//		buffer.reset();
//
//		    // Calculate inSampleSize
//		options.inSampleSize = calculateInSampleSize(options, 100,100);
//
//		    // Decode bitmap with inSampleSize set
//		options.inJustDecodeBounds = false; 
//		BitmapFactory.decodeStream(buffer,null,options);
		//bmp = DownloadImage("http://www.gophoto.it/view.php?i=http://1.bp.blogspot.com/-2LTvCCufBKc/T3L3KgcTj2I/AAAAAAAABbQ/Ki60e1LU9sE/s1600/Sachin%2BTendulkar.png");
		return bmp;
	}
    public Bitmap DecodeBitmapSampleSize (String strURL, int reqWidth, int reqHeight) {
        InputStream in = null;
        Bitmap bmp = null;

        in = OpenHttpConnection(strURL);
        final BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeStream(in, null, options);

        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);

        options.inJustDecodeBounds = false;
        bmp = BitmapFactory.decodeStream(in, null, options);
                return bmp;
    }
    private InputStream OpenHttpConnection(String strURL) {

        try {
            URL url = new URL(strURL);

            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            InputStream in = new BufferedInputStream(connection.getInputStream());
            return in;
        } catch (Exception exception) {
            exception.printStackTrace();
            return null;
        }
    }
    public static int calculateInSampleSize(BitmapFactory.Options options,
            int reqWidth, int reqHeight) {

        final int width = options.outWidth;
        final int height = options.outHeight;
        int inSampleSize = 1;

        if (width > reqWidth || height > reqHeight) {
            if (width > height) {
                inSampleSize = Math.round((float) height / (float) reqHeight);
            } else {
                inSampleSize = Math.round((float) width / (float) reqWidth);
            }
        }
        return inSampleSize;
    }
	@Override
	protected void onPostExecute(Bitmap result) {
		// TODO Auto-generated method stub
		super.onPostExecute(result);
		imageView.setImageBitmap(result);
	}

//    private InputStream OpenHttpConnection(String urlString) throws IOException {
//        InputStream in = null;
//        int response = -1;
//
//        URL url = new URL(urlString);
//        URLConnection conn = url.openConnection();
//
//        if (!(conn instanceof HttpURLConnection))
//            throw new IOException("Not an HTTP connection");
//
//        try {
//            HttpURLConnection httpConn = (HttpURLConnection) conn;
//            httpConn.setAllowUserInteraction(false);
//            httpConn.setInstanceFollowRedirects(true);
//            httpConn.setRequestMethod("GET");
//            httpConn.connect();
//            response = httpConn.getResponseCode();
//            if (response == HttpURLConnection.HTTP_OK) {
//                in = httpConn.getInputStream();
//            }
//        } catch (Exception ex) {
//            throw new IOException("Error connecting");
//        }
//        return in;
//    }
//
//    private Bitmap DownloadImage(String URL) {
//        Bitmap bitmap = null;
//        InputStream inputstream = null;
//        try {
//        	   
//        	inputstream = OpenHttpConnection(URL);
//        	    if (!inputstream.markSupported()) {
//        	        inputstream = new BufferedInputStream(inputstream, BUFFER_SIZE);
//        	    }
//        	    inputstream.mark(BUFFER_SIZE);
//        	    BitmapFactory.Options options = new BitmapFactory.Options();
//        	    options.inJustDecodeBounds = true;
//        	    // We give decodeStream a wrapped input stream so it doesn't
//        	    // mess with our mark (currently it sets a mark of 1024)
//        	    BitmapFactory.decodeStream(
//        	            new BufferedInputStream(inputstream), null, options);
//        	    options.inJustDecodeBounds = false;
//        	    try {
//        	        inputstream.reset();
//        	    } catch (IOException e) {
//        	        // BitmapFactory read more than we could buffer
//        	        // Re-open the stream
//        	        inputstream.close();
//        	        //inputstream = openStream();
//        	    }
//        	    bitmap = BitmapFactory.decodeStream(inputstream,
//        	            null, options);
//            //in = OpenHttpConnection(URL);
//            //bitmap = BitmapFactory.decodeStream(in);
//        	    inputstream.close();
//        } catch (IOException e1) {
//            // TODO Auto-generated catch block
//            e1.printStackTrace();
//        }
//        return bitmap;
//    }
}
